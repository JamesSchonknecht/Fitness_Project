ylab="RISK",
cex.lab = 1.6)
lines(x=values$ROI, y=values$Risk,
type="s",
col="red")
# ROI vs correlation
plot(x=values$ROI, y=values$Correlation,
type="p",
pch=4,
col="red",
xlab="-ROI",
ylab="CORRELATION")
lines(x=values$ROI, y=values$Correlation,
type="s",
col="red")
# Risk vs correlation
plot(x=values_2$Risk, y=values_2$Correlation,
type="p",
pch=4,
col="red",
xlab="RISK",
ylab="CORRELATION")
lines(x=values_2$Risk, y=values_2$Correlation,
type="s",
col="red")
# Incorporating new correlation objective function into invest.R script
# Invest.R script
###########################################
# invest.R
###########################################
#
# Build a multi-objective constrained model
# for an investment portfolio
###########################################
#install.packages("mco")
library(mco)
# The 30 investments that will be used to select
# a portfolio are in "invest.tab"
#
invest <- read.table("../data/invest.tab")
#
# Determine number of options from the invest table
#
numberOptions <- nrow(invest)
#
# The format of invest is:
# Each row is an option
# Columns are : ROI (return on investment), Risk, Type
# 			    where Type = 1 (Stock), 2 (bond), 3 (cash)
#
#############################################################
# Each option from the table must either not be selected
# OR must be between an amount
#   minAMOUNT <= amount <= maxAMOUNT
#
# We will assume that anything < minAMOUNT
# is equivalent to zero (and therefore not included)
#############################################################
minAMOUNT = 0.05
maxAMOUNT = 0.2
##########################################
# CONSTRAINTS
##########################################
# The sum of the portfolios must be between
# 0.95 and 1.0
# Constraints are satisfied by being >= 0
#############################################
portfolioSUM <- function(x)
{
selected <- which(x >= minAMOUNT)
sumx = sum(x[selected])
if ((sumx >=0.95) && (sumx <=1.0)) return(1) # ok
return(-1) # Fails constraint
}
###########################################################################
# Constraint - each selected option must be  >= minAMOUNT
#              and <= maxAMOUNT
# We ignore options with value < minAMOUNT because they
# aren't part of the final selection of investments.
###########################################################################
portfolioRANGE <- function(x)
{
selected <- which(x >= minAMOUNT)  # Only count if at least minimum
over <- which(x[selected] > maxAMOUNT)
if (length(over) > 0) return(-1)
return(1)
}
##################################################################
# Constraints on the minimum and maximum number of selected
# stocks/bonds/cash
##################################################################
minNumber = 8
maxNumber = 12
portfolioNUM <- function(x)
{
numselected <- length(which(x >= minAMOUNT))
if (numselected < minNumber) return(-1)
if (numselected > maxNumber) return(-1)
return(numselected)
}
############################################################
# Functions to be minimised/maximised
############################################################
###############################
# Return on Investment (ROI)
###############################
# This wants to be MAXIMISED
# Only include options that are greater than the minAMOUNT
#############################################################
ROI <- function(x)
{
selected <- which(x >= minAMOUNT)
roi <- sum(invest$ROI[selected]*x[selected])
return(-roi) # Since nsgaII minimises we take the negative
}
mycorr <- function(x)
{
selected <- which(x >= minAMOUNT)
}
#################################
# Risk (RISK)
#################################
# This is to be MINIMISED
# Only include options that are greater than the minAMOUNT
##############################################################
RISK <- function(x)
{
selected <- which(x >= minAMOUNT)
risk <- sum(invest$Risk[selected]*x[selected])  # Just the sum of risk
return(risk) # we want to minimise the risk
}
##################################################
# Here are the functions that are to be minimised
# Note ROI is actually maximised, while RISK is
# minimised.
###################################################
funs <- function(x)
{
return(c(ROI(x),RISK(x), CORRELATION(x)))
}
######################################################
# Here are the constraints
# Since nsga2 assumes a single constraint function, we
# call each constraint in turn, and return the results
# of all the constraints as a concatenated list
######################################################
constraintFNS <- function(x)
{
psum = portfolioSUM(x)
prange = portfolioRANGE(x)
pnum = portfolioNUM(x)
return(c(prange,pnum,psum))
}
#############################################################
# Set the lower and upper bounds for
# each investment option
# The lower bound is 0; upper bound is maxAMOUNT
#############################################################
lower = rep(0,numberOptions)
# The upper bound is the maximum amount of an option, which is maxAMOUNT
upper = rep(maxAMOUNT,numberOptions)
#
set.seed(1)
###########################################################
# CALL nsga2 to find the pareto optimal solutions
###########################################################
portfolio <- nsga2(funs,
idim=numberOptions, # inputs for each option,
odim=3, # outputs (ROI,RISK,CORRELATION)
popsize=52,
generations=500,
lower.bounds=lower,
upper.bounds=upper,
constraints = constraintFNS,
cdim=3) # 3 constraints
######## Plot the pareto front using default plotting
###########################################################
# plot(portfolio,xlab="-ROI (%)",ylab="RISK",main="Objective Space")
# Create data frame of objective values (52 rows, 3 columns), ordered in ascending order of risk
values <- portfolio$value %>% as.data.frame()
colnames(values) <- c("ROI", "Risk", "Correlation")
values <- values %>% arrange(., ROI)
values_2 <- values %>% arrange(., Risk)
# ROI vs risk
plot(x=values$ROI, y=values$Risk,
type="p",
pch=4,
col="red",
xlab="-ROI",
ylab="RISK")
lines(x=values$ROI, y=values$Risk,
type="s",
col="red")
# ROI vs correlation
plot(x=values$ROI, y=values$Correlation,
type="p",
pch=4,
col="red",
xlab="-ROI",
ylab="CORRELATION")
lines(x=values$ROI, y=values$Correlation,
type="s",
col="red")
# Risk vs correlation
plot(x=values_2$Risk, y=values_2$Correlation,
type="p",
pch=4,
col="red",
xlab="RISK",
ylab="CORRELATION")
lines(x=values_2$Risk, y=values_2$Correlation,
type="s",
col="red")
tinytex::install_tinytex()
values_2
values_2 %>% arrange(Correlation)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
total <- sum(white, mixed, asian_AB, black_BB, chinese, other)
percent_white <- (white/total) * 100
library(tidyverse)
setwd("C:\Users\james\OneDrive\PowerBI Practice")
setwd("C:/Users/james/OneDrive/PowerBI Practice")
getwd()
list.files()
strong_data <- read.csv("strong965753607026263731.csv")
library(tidyverse)
setwd("C:/Users/james/OneDrive/PowerBI Practice")
strong_data <- read.csv("strong965753607026263731.csv")
View(strong_data)
data.frame(strong_data)
df <- data.frame(strong_data)
df
View(df)
rm(df)
View(strong_data)
filtered_df <- strong_data[grepl("^202", strong_data$Date.Workout.Name.Exercise.Name.Set.Order.Weight.Weight.Unit.Reps.RPE.Distance.Distance.Unit.Seconds.Notes.Workout.Notes.Workout.Duration), ]
View(strong_data)
View(strong_data)
file_path <- "C:/Users/james/OneDrive/PowerBI Practice/strong965753607026263731.csv"
strong_data <- readLines(file_path)
# Initialise empty vector to store lines
cleaned_lines <- c()
# Initialise empty vector to store lines
cleaned_lines <- c()
current_line <- ""
print(line)
# Iterate through each line
for line in strong_data {
# Iterate through each line
for (line in strong_data) {
print(line)
}
# Test line
test_line <- "2024-10-31 10:47:07;\"Morning Workout\";\"Hack Squat Sissy Squat\";2;20;kg;8;;;;0;;;1h 53m"
test_line
# Test line
test_line <- "2024-10-31 10:47:07;\"Morning Workout\";\"Hack Squat Sissy Squat\";2;20;kg;8;;;;0;;;1h 53m"
# Iterate through each line
for (line in strong_data) {
print(line)
}
# Test line
test_line <- "2024-10-31 10:47:07;\"Morning Workout\";\"Hack Squat Sissy Squat\";2;20;kg;8;;;;0;;;1h 53m"
test_line
# Iterate through each line
for (line in strong_data) {
print(line)
}
print(test_line)
grepl("^202", test_line)
grepl("^2023", test_line)
grepl(line, "^202\\d")
grepl("^202\\d", test_line)
grepl("^202\\d{2}", test_line)
grepl("^202\\d+", test_line)
grepl("^202\\d-", test_line)
grepl("^d{4}-\\d{2}-\\d{2}", test_line)
grepl("^\\d{4}-\\d{2}-\\d{2}", test_line)
# Iterate through each line
for (line in strong_data) {
grepl("^\\d{4}-\\d{2}-\\d{2}", line)
}
# Iterate through each line
for (line in strong_data) {
if (grepl("^\\d{4}-\\d{2}-\\d{2}", line)) {
print("TRUE")
} else {
print("FALSE")
}
}
line_number <- 0
cleaned_lines <- c()
current_line <- ""
line_number <- 0
# Iterate through each line
for (line in strong_data) {
line_number <- line_number + 1
# If current line starts with date, then add it to cleaned lines vector
if (grepl("^\\d{4}-\\d{2}-\\d{2}", line)) {
cleaned_lines <- c(cleaned_lines, line)
# If current line does not start with date (incorrect format), append it to previous line, then add to cleaned lines vector
} else {
print("FALSE")
}
}
print(cleaned_lines)
cleaned_lines[1]
cleaned_lines[1000]
cleaned_lines[0]
paste0(cleaned_lines[999], cleaned_lines[1000])
cleaned_lines <- c()
current_line <- ""
line_number <- 0
# Iterate through each line
for (line in strong_data) {
line_number <- line_number + 1
# If current line starts with date, then add it to cleaned lines vector
if (grepl("^\\d{4}-\\d{2}-\\d{2}", line)) {
cleaned_lines <- c(cleaned_lines, line)
# If current line does not start with date (incorrect format), append it to previous line, then add to cleaned lines vector
} else {
paste0(cleaned_lines[line_number - 1], line)
}
}
cat(cleaned_lines)
print(cleaned_lines)
strong_data
cleaned_lines
write.csv(cleaned_lines, eol = "\n", file = "cleaned data.csv")
# Initialise empty vector to store lines
header_line <- strong_data[1]
header_line
length(strong'')
length(strong_data)
strong_data[1]
strong_data[2]
rm(header_line)
# Initialise empty vector to store lines
cleaned_lines <- c(strong_data[1])
# Initialise empty vector to store lines
cleaned_lines <- c(strong_data[1])
line_number <- 0
# Iterate through each line
for (line in strong_data[2:length(strong_data)]) {
line_number <- line_number + 1
# If current line starts with date, then add it to cleaned lines vector
if (grepl("^\\d{4}-\\d{2}-\\d{2}", line)) {
cleaned_lines <- c(cleaned_lines, line)
# If current line does not start with date (incorrect format), append it to previous line, then add to cleaned lines vector
} else {
paste0(cleaned_lines[line_number - 1], line)
}
}
write.csv(cleaned_lines, eol = "\n", file = "cleaned data.csv")
writeLines(cleaned_lines, eol = "\n", file = "cleaned data.csv")
writeLines(cleaned_lines, file = "cleaned data.csv")
writeLines(cleaned_lines, con = "cleaned data.csv")
library(tidyverse)
# Load data
setwd("C:/Users/james/OneDrive/PowerBI Practice")
file_path <- "C:/Users/james/OneDrive/PowerBI Practice/strong965753607026263731.csv"
strong_data <- readLines(file_path)
# Initialise empty vector to store lines
cleaned_lines <- c(strong_data[1])
line_number <- 0
# Iterate through each line
for (line in strong_data[2:length(strong_data)]) {
line_number <- line_number + 1
# If current line starts with date, then add it to cleaned lines vector
if (grepl("^\\d{4}-\\d{2}-\\d{2}", line)) {
cleaned_lines <- c(cleaned_lines, line)
# If current line does not start with date (incorrect format), append it to previous line, then add to cleaned lines vector
} else {
line <- paste0(cleaned_lines[line_number - 1], line)
cleaned_lines <- c(cleaned_lines, line)
}
}
writeLines(cleaned_lines, con = "cleaned data.csv")
library(tidyverse)
# Load data
setwd("C:/Users/james/OneDrive/PowerBI Practice")
file_path <- "C:/Users/james/OneDrive/PowerBI Practice/strong965753607026263731.csv"
strong_data <- readLines(file_path)
# Initialise empty vector to store lines
cleaned_lines <- c(strong_data[1])
line_number <- 0
# Iterate through each line
for (line in strong_data[2:length(strong_data)]) {
line_number <- line_number + 1
# If current line starts with date, then add it to cleaned lines vector
if (grepl("^\\d{4}-\\d{2}-\\d{2}", line)) {
cleaned_lines <- c(cleaned_lines, line)
# If current line does not start with date (incorrect format), append it to previous line, then add to cleaned lines vector
} else {
line <- paste0(cleaned_lines[strong_data - 1], line)
cleaned_lines <- c(cleaned_lines, line)
}
}
library(tidyverse)
# Load data
setwd("C:/Users/james/OneDrive/PowerBI Practice")
file_path <- "C:/Users/james/OneDrive/PowerBI Practice/strong965753607026263731.csv"
strong_data <- readLines(file_path)
# Initialise empty vector to store lines
cleaned_lines <- c(strong_data[1])
line_number <- 0
# Iterate through each line
for (line in strong_data[2:length(strong_data)]) {
line_number <- line_number + 1
# If current line starts with date, then add it to cleaned lines vector
if (grepl("^\\d{4}-\\d{2}-\\d{2}", line)) {
cleaned_lines <- c(cleaned_lines, line)
# If current line does not start with date (incorrect format), append it to previous line, then add to cleaned lines vector
} else {
line <- paste0(strong_data[line_number - 1], line)
cleaned_lines <- c(cleaned_lines, line)
}
}
writeLines(cleaned_lines, con = "cleaned data.csv")
test_line_1 <- strong_data[4935]
test_line_1
test_line_2 <- strong_data[4936]
test_line_2
test_line_1
test_line_2
paste0(test_line_1, test_line_2)
strong_data[2:length(strong_data)]
cleaned_lines[1:5]
cleaned_lines[length(cleaned_lines)
cleaned_lines[length(cleaned_lines)]
length(cleaned_lines)
library(tidyverse)
# Load data
setwd("C:/Users/james/OneDrive/PowerBI Practice")
file_path <- "C:/Users/james/OneDrive/PowerBI Practice/strong965753607026263731.csv"
strong_data <- readLines(file_path)
# Initialise empty vector to store lines
cleaned_lines <- c(strong_data[1])
line_number <- 0
# Iterate through each line
for (line in strong_data[2:length(strong_data)]) {
line_number <- line_number + 1
# If current line starts with date, then add it to cleaned lines vector
if (grepl("^\\d{4}-\\d{2}-\\d{2}", line)) {
cleaned_lines <- c(cleaned_lines, line)
# If current line does not start with date (incorrect format), append it to previous line, then add to cleaned lines vector
} else {
line <- paste0(cleaned_lines[length(cleaned_lines)], line)
cleaned_lines <- c(cleaned_lines, line)
}
}
writeLines(cleaned_lines, con = "cleaned data.csv")
library(tidyverse)
# Load data
setwd("C:/Users/james/OneDrive/PowerBI Practice")
file_path <- "C:/Users/james/OneDrive/PowerBI Practice/strong965753607026263731.csv"
strong_data <- readLines(file_path)
# Initialise empty vector to store lines
cleaned_lines <- c(strong_data[1])
line_number <- 0
# Iterate through each line
for (line in strong_data[2:length(strong_data)]) {
line_number <- line_number + 1
# If current line starts with date, then add it to cleaned lines vector
if (grepl("^\\d{4}-\\d{2}-\\d{2}", line)) {
cleaned_lines <- c(cleaned_lines, line)
# If current line does not start with date (incorrect format), replace previous line with current line appended to it
} else {
line <- paste0(cleaned_lines[length(cleaned_lines)], line)
cleaned_lines[length(cleaned_lines)] <- line
}
}
writeLines(cleaned_lines, con = "cleaned data.csv")
# Load data
setwd("C:/Users/james/OneDrive/PowerBI Practice")
file_path <- "C:/Users/james/OneDrive/PowerBI Practice/strong965753607026263731.csv"
strong_data <- readLines(file_path)
# Initialise empty vector to store lines
cleaned_lines <- c(strong_data[1])
line_number <- 0
# Iterate through each line
for (line in strong_data[2:length(strong_data)]) {
line_number <- line_number + 1
# If current line starts with date, then add it to cleaned lines vector
if (grepl("^\\d{4}-\\d{2}-\\d{2}", line)) {
cleaned_lines <- c(cleaned_lines, line)
# If current line does not start with date (incorrect format), replace previous line with current line appended to it
} else {
line <- paste0(cleaned_lines[length(cleaned_lines)], line)
cleaned_lines[length(cleaned_lines)] <- line
}
}
writeLines(cleaned_lines, con = "cleaned_strong965753607026263731.csv")
# Load data
setwd("C:/Users/james/OneDrive/PowerBI Practice")
file_path <- "C:/Users/james/OneDrive/PowerBI Practice/strong965753607026263731.csv"
strong_data <- readLines(file_path)
# Initialise vector with header row to store lines
cleaned_lines <- c(strong_data[1])
# Iterate through each line
for (line in strong_data[2:length(strong_data)]) {
# If current line starts with date, then add it to cleaned lines vector
if (grepl("^\\d{4}-\\d{2}-\\d{2}", line)) {
cleaned_lines <- c(cleaned_lines, line)
# If current line does not start with date (incorrect format), replace previous line with current line appended to it
} else {
line <- paste0(cleaned_lines[length(cleaned_lines)], line)
cleaned_lines[length(cleaned_lines)] <- line
}
}
writeLines(cleaned_lines, con = "cleaned_strong965753607026263731.csv")
